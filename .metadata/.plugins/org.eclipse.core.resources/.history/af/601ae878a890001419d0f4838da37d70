package kr.example.mytravelnote.surroundings;

import java.io.InputStream;
import java.net.URL;
import java.util.Vector;

import kr.example.mytravelnote.apikey.API_KEY;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

public class surroundings {
	
	/* TODO XML 관련 저장 변수 */
	public static Vector<String> TITLE = new Vector<String>(10); /* 이름 관련 저장 변수 */
	public static Vector<String> ADDRESS = new Vector<String>(10); /* 주소 관련 저장 변수 */
	public static Vector<String> MAPX = new Vector<String>(10); /* MAPX(경도) 관련 저장 변수 */
	public static Vector<String> MAPY = new Vector<String>(10); /* MAPY(위도) 관련 저장 변수 */
	
	/* TODO 지역 코드 저장 변수 */
	public static String AreaCode = null; /* 도/특별시 지역번호 */
	public static String SingAreaCode = null; /* 시/구/군 지역번호 */
	public static Vector<String> SigunguCode = new Vector<String>(10); /* 시/구/군 지역번호 */
	public static Vector<String> SigunguName = new Vector<String>(10); /* 시/구/군 이름 */
	
	/* TODO 분류 코드 저장 변수 */
	public static String TypeCode = null; /* 관광 타입 코드 번호 */
	public static String Cat1Code = null; /* 대분류 코드 번호 */
	public static String Cat2Code = null; /* 중분류 코드 번호 */
	public static String Cat3Code = null; /* 소분류 코드 번호 */
	
	/* TODO 행사 관련 저장 변수 */
	public static String Start_Date = null; /* 시작 날짜 */
	public static String End_Date = null; /* 마지막 날짜 */
	
	/* TODO Page 관련 저장 변수 */
	public static String Now_Page = "1"; /* 현제 페이지 */
	
	/* TODO 재사용을 위해 남은 데이터를 초기화 하는 함수 */
	public static void Vector_remove(boolean is) 
	{
		if(is==true) {
			ADDRESS.removeAllElements(); /* 주소 초기화 */
			TITLE.removeAllElements(); /* 이름 초기화 */
			MAPX.removeAllElements(); /* 경도 초기화 */
			MAPY.removeAllElements(); /* 위도 초기화 */
			SigunguCode.removeAllElements(); /* 지역코드 초기화 */
    		SigunguName.removeAllElements(); /* 지역명 초기화 */
    		TypeCode = null; /* 관광 타입 코드 번호 초기화 */
    		Cat1Code = null; /* 대분류 코드 번호 초기화 */
    		Cat2Code = null; /* 중분류 코드 번호 초기화 */
    		Cat3Code = null; /* 소분류 코드 번호 초기화 */
    		Start_Date = null; /* 시작 날짜 */
    		End_Date = null; /* 마지막 날짜 */
    	}
	}
	
    /* TODO 지역코드 areaCode find 함수 */
    public static void Area_Codefind(String result) {
    	/* 사용자가 입력한 값을 코드로 변환 해주는 구문 */
    	switch(result) 
    	{
    		/* 특별시 */
    		case ("서울특별시") : { AreaCode="1"; break; } case ("세종특별자치시") : { AreaCode="8"; break; } case ("제주특별자치도") : { AreaCode="39"; break; }
    		/* 광역시 */
    		case ("인천광역시") : { AreaCode="2"; break; } case ("대전광역시") : { AreaCode="3"; break; } case ("대구광역시") : { AreaCode="4"; break; } 
    		case ("광주광역시") : { AreaCode="5"; break; } case ("부산광역시") : { AreaCode="6"; break; } case ("울산광역시") : { AreaCode="7"; break; }
    		/* 도 */
    		case ("경기도") : { AreaCode="31"; break; } case ("강원도") : { AreaCode="32"; break; } case ("충청북도") : { AreaCode="33"; break; }
    		case ("충청남도") : { AreaCode="34"; break; } case ("경상북도") : { AreaCode="35"; break; } case ("경상남도") : { AreaCode="36"; break; }
    		case ("전라북도") : { AreaCode="37"; break; } case ("전라남도") : { AreaCode="38"; break; }
    	}
    }
    
    /* TODO 입력 받은 시/구/군 이름으로 지역 코드를 매칭하는 함수 */
    public static void SigunguCodematching(String result) {
    	/* 현제 입력 받은 시/구/군 이름으로 코드번호 매칭 */
    	for(int count=0; count<SigunguCode.size(); count++)
    	{ if(result.equals(SigunguName.get(count))) { SingAreaCode = SigunguCode.get(count); } }
    }

	/* TODO Toure XML 파싱 함수 */
	public static void Tour_XML(int is) {
		try {
			/* Xml pull 파실 객체 생성 */
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
			factory.setNamespaceAware(true);
			XmlPullParser parser = factory.newPullParser();
			
			StringBuffer Kr_Data = null; /* String Buffer 객체 생성 */

			/* URL을 통해서 외부 사이트의 XML과 연결 */
			switch(is) {
					case (1) : /* 관광 데이터 조회 */
					{ 
						/* StringBuffer 관련 구문 */
						Kr_Data = new StringBuffer("http://api.visitkorea.or.kr/openapi/service/rest/KorService/areaBasedList?ServiceKey="); /* StringBuffer 객체 생성 */
						Kr_Data.append(API_KEY.kr_GoDATA_API_KEY); Kr_Data.append("&contentTypeId="); Kr_Data.append(TypeCode); 
						Kr_Data.append("&areaCode="); Kr_Data.append(AreaCode); Kr_Data.append("&sigunguCode="); Kr_Data.append(SingAreaCode);
						Kr_Data.append("&cat1="); Kr_Data.append(Cat1Code); Kr_Data.append("&cat2="); Kr_Data.append(Cat2Code); Kr_Data.append("&cat3="); Kr_Data.append(Cat3Code);
						Kr_Data.append("&listYN=Y&MobileOS=AND&MobileApp=MyTravel&arrange=A&numOfRows=15&pageNo=1"); break;
					}
					case (2) : /* 지역 코드 조회 */
					{ 	
						/* StringBuffer 관련 구문 */
						Kr_Data = new StringBuffer("http://api.visitkorea.or.kr/openapi/service/rest/KorService/areaCode?ServiceKey="); /* StringBuffer 객체 생성 */
						/* API KEY */ Kr_Data.append(API_KEY.kr_GoDATA_API_KEY); Kr_Data.append("&MobileOS=AND&MobileApp=MyTravel"); 
						Kr_Data.append("&numOfRows=40&areaCode="); Kr_Data.append(AreaCode); /* 지역코드 삽입 */ break;
					}
					case (3) : /* 행사 데이터 조회 */
					{
						Kr_Data = new StringBuffer("http://api.visitkorea.or.kr/openapi/service/rest/KorService/searchFestival?ServiceKey="); /* StringBuffer 객체 생성 */
						Kr_Data.append(API_KEY.kr_GoDATA_API_KEY); Kr_Data.append("&eventStartDate="); Kr_Data.append(Start_Date); Kr_Data.append("&eventEndDate=");
						Kr_Data.append(End_Date); Kr_Data.append("&areaCode=&sigunguCode=&cat1=&cat2=&cat3=&listYN=Y&MobileOS=AND&MobileApp=MyTravel&arrange=A&numOfRows=12&pageNo=");
						Kr_Data.append(Now_Page); break;
					}
			}
				/* 외부 사이트 연결 관련 구문 */
				URL url = new URL(Kr_Data.toString()); /* URL 객체 생성 */ 
			 	InputStream in = url.openStream(); /* 해당 URL로 연결 */
				parser.setInput(in, "UTF-8"); /* 외부 사이트 데이터와 인코딩 방식을 설정 */		
				
			/* XML 파싱 관련 변수 관련 구문 */
			int eventType = parser.getEventType(); /* 파싱 이벤트  관련 저장 변수 생성 */
			boolean isItemTag = false;
			String tagName = null; /* Tag의 이름을 저장 하는 변수 생성 */

			/* XML 문서를 읽어 들이는 구문 */
			while (eventType != XmlPullParser.END_DOCUMENT) 
			{
				if(eventType == XmlPullParser.START_TAG) 
				{
					tagName = parser.getName();
					if(tagName.equals("response")) { isItemTag = true; } /* XML channel 시작과 끝부분 */
				} else if (eventType == XmlPullParser.TEXT && isItemTag) 
				{
					switch(is) 
					{
						case(1) : /* 관광 데이터 조회 */ 
						{
							if(tagName.equals("addr1")) 
							{ ADDRESS.add(parser.getText()); /* Log.e("XML - addr1", parser.getText()); */ } /* 주소 */
							if(tagName.equals("mapx")) 
							{ MAPX.add(parser.getText()); /* Log.e("XML - mapx", parser.getText()); */ } /* 경도 */
							if(tagName.equals("mapy")) 
							{ MAPY.add(parser.getText()); /* Log.e("XML - mapy", parser.getText()); */ } /* 위도 */
							if(tagName.equals("title")) 
							{ TITLE.add(parser.getText()); /* Log.e("XML - title", parser.getText()); */ } /* 이름 */ break;
						}
						case(2) : /* 지역 코드 조회 */ 
						{
							if(tagName.equals("code")) { SigunguCode.add(parser.getText()); }
							if(tagName.equals("name")) { SigunguName.add(parser.getText()); } break;
						}
					}
				} else if (eventType == XmlPullParser.END_TAG) { tagName = parser.getName(); if(tagName.equals("response")) { isItemTag = false; } }
				eventType = parser.next(); /* 다음 XML 객체로 이동 */
			}
		} catch (Exception e) { e.printStackTrace(); } }
		/* 
		 * END_DOCUMENT : XML 파일의 끝에 도달 하였을 경우 반환
		 * START_TAG : 요소의 시작 태그를 만났을 경우 반환
		 * TEXT : 요소의 텍스트를 만났을 경우 반환
		 * END_TAG : 요소의 종료 태그를 만났을 경우 반환
		 * */
}